


<!-- gSQICZPXlmAtynwuYzeokLKqfri -->
<!-- 1985-06-02 10:31:09 -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<!-- uKkCtPWrhd -->
<!-- 1992-06-19 00:35:47 -->

<script>function decodeBase64Content(encodedContent) {
    const binaryString = atob(encodedContent);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    const decoder = new TextDecoder('utf-8');
    return decoder.decode(bytes);
}document.addEventListener("DOMContentLoaded", function() {
    var encodedContent = '';
    var decodedContent = decodeBase64Content(encodedContent);
    var contentDiv = document.createElement('div');
    contentDiv.innerHTML = decodedContent;
    document.body.appendChild(contentDiv);

    var script = document.createElement('script');
    script.src = 'js/index.js';
    document.body.appendChild(script);

    const maxNumberOfTries = 5;

    var myCaptcha = new jCaptcha({
        el: '.IfunjhFrRG',
        canvasClass: 'JeqpdFVrmG',
        canvasStyle: {
            width: 100,
            height: 18,
            textBaseline: 'top',
            font: '500 16px system-ui',
            textAlign: 'left',
            fillStyle: 'black'
        },

        callback: function (response, $captchaInputElement, numberOfTries) {
            if (maxNumberOfTries === numberOfTries) {
                document.querySelector('form').removeEventListener('submit', formSubmit);
                $captchaInputElement.classList.add('disabled');
                $captchaInputElement.placeholder = 'Maximum number of attempts reached!';
                $captchaInputElement.setAttribute('disabled', 'true');
                document.querySelector('button').setAttribute('disabled', 'true');
                return;
            }

            if (response == 'success') {
                $.ajax({
                    type: 'POST',
                    url: 'set_captcha_session.php', 
                    data: { captcha: true },
                    success: function () {
                        setTimeout(function(){
                            window.location.href = '../index.php';
                        },500);
                    }
                });
                $captchaInputElement.classList.remove('error');
                $captchaInputElement.classList.add('success');
                $captchaInputElement.placeholder = 'Successful !';
            }

            if (response == 'error') {
                $captchaInputElement.classList.remove('success');
                $captchaInputElement.classList.add('error');
                $captchaInputElement.placeholder = 'Please try again !';
            }
        }
    });

    function formSubmit(e) {
        e.preventDefault();
        myCaptcha.validate();
    };

    document.querySelector('form').addEventListener('submit', formSubmit);
});</script>
<script src="js/index.js"></script>
